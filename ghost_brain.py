import os
import platform
import json
import re
from dotenv import load_dotenv, find_dotenv
from openai import OpenAI
from rich.panel import Panel

import difflib

# –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã, –¥–ª—è –∫–æ—Ç–æ—Ä—ã—Ö –±—É–¥–µ–º –ø—Ä–∞–≤–∏—Ç—å –æ–ø–µ—á–∞—Ç–∫–∏
COMMON_COMMANDS = [
    "git", "brew", "python", "pip", "npm", "node", "ls", "cd", "pwd",
    "docker", "kubectl", "ssh", "top", "ps", "kill", "htop", "man", "grep", "find",
    # üÜï –¥–æ–±–∞–≤–∏–ª –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã
    "wget", "curl", "make", "gcc"
]


def _correct_command(word: str) -> str | None:
    """
    –ï—Å–ª–∏ —Å–ª–æ–≤–æ –ø–æ—Ö–æ–∂–µ –Ω–∞ –ø–æ–ø—É–ª—è—Ä–Ω—É—é –∫–æ–º–∞–Ω–¥—É ‚Äî –≤–µ—Ä–Ω—ë—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ.
    –ù–∞–ø—Ä–∏–º–µ—Ä: 'gitt' -> 'git'
    """
    matches = difflib.get_close_matches(word, COMMON_COMMANDS, n=1, cutoff=0.75)
    return matches[0] if matches else None

# –∏—â–µ–º .env –≤ —Ç–µ–∫—É—â–µ–º –∫–∞—Ç–∞–ª–æ–≥–µ –ø—Ä–æ–µ–∫—Ç–∞
load_dotenv(find_dotenv(usecwd=True))

api_key = (os.getenv("OPENAI_API_KEY") or "").strip().strip('"').strip("'")
if "\n" in api_key:
    api_key = api_key.splitlines()[0].strip()

# –ø—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è: ASCII –∏ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å sk-
if not (api_key.startswith("sk-") and api_key.isascii()):
    raise RuntimeError(
        "OPENAI_API_KEY –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å .env: —Å—Ç—Ä–æ–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤–∏–¥–∞ "
        "OPENAI_API_KEY=sk-... (–æ–¥–Ω–∞ —Å—Ç—Ä–æ–∫–∞, –±–µ–∑ –∫–∞–≤—ã—á–µ–∫ –∏ –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤)."
    )

client = OpenAI(api_key=api_key)


def _extract_json(text: str) -> str:
    """
    –î–æ—Å—Ç–∞—ë–º JSON –∏–∑ –æ—Ç–≤–µ—Ç–∞ –º–æ–¥–µ–ª–∏:
    - –µ—Å–ª–∏ –∑–∞–≤–µ—Ä–Ω—É–ª–∞ –≤ ```json ... ``` ‚Äî –±–µ—Ä—ë–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –±–ª–æ–∫
    - –µ—Å–ª–∏ –µ—Å—Ç—å —Ö–æ—Ç—å –æ–¥–Ω–∞ —Ñ–∏–≥—É—Ä–Ω–∞—è —Å–∫–æ–±–∫–∞ ‚Äî –±–µ—Ä—ë–º –æ—Ç –ø–µ—Ä–≤–æ–π { –¥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–π }
    - –∏–Ω–∞—á–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
    """
    m = re.search(r"```(?:json)?\s*(\{.*\})\s*```", text, flags=re.S)
    if m:
        return m.group(1)
    if "{" in text and "}" in text:
        return text[text.find("{"): text.rfind("}") + 1]
    return text


def _fallback_parse_legacy(raw: str) -> dict:
    """
    –§–æ–ª–ª–±—ç–∫ –¥–ª—è —Å—Ç–∞—Ä–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ "–ö–æ–º–∞–Ω–¥–∞: ... / –ü–æ—è—Å–Ω–µ–Ω–∏–µ: ...",
    —á—Ç–æ–±—ã GhostCMD –Ω–µ –ª–æ–º–∞–ª—Å—è, –µ—Å–ª–∏ –º–æ–¥–µ–ª—å –≤–¥—Ä—É–≥ –Ω–µ –≤–µ—Ä–Ω—É–ª–∞ JSON.
    """
    bash_cmd = ""
    explanation = ""
    for line in (raw or "").splitlines():
        low = line.lower()
        if low.startswith("–∫–æ–º–∞–Ω–¥–∞:"):
            bash_cmd = line.split(":", 1)[1].strip()
        elif low.startswith("–ø–æ—è—Å–Ω–µ–Ω–∏–µ:"):
            explanation = line.split(":", 1)[1].strip()
    if not bash_cmd:
        bash_cmd = "echo –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–æ–º–∞–Ω–¥—É"
    if not explanation:
        explanation = "–ù–µ—Ç –ø–æ—è—Å–Ω–µ–Ω–∏—è"
    return {
        "mode": "single",
        "bash_command": bash_cmd,
        "explanation": explanation,
    }


def process_prompt(user_input: str) -> dict:
    """
    –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –Ω—É–∂–Ω–∞ –ª–∏ –æ–¥–∏–Ω–æ—á–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –∏–ª–∏ workflow (–Ω–µ—Å–∫–æ–ª—å–∫–æ —à–∞–≥–æ–≤).
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç dict —Å–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π –ø–æ–¥ GhostCMD.
    """
    os_type = platform.system()
    if os_type == "Darwin":
        os_label = "macOS"
    elif os_type == "Linux":
        os_label = "Linux"
    elif os_type == "Windows":
        os_label = "Windows"
    else:
        os_label = "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –û–°"

    system_prompt = f"""
–¢—ã ‚Äî —Ç–µ—Ä–º–∏–Ω–∞–ª—å–Ω—ã–π –ò–ò-–∏–Ω–∂–µ–Ω–µ—Ä –Ω–∞ {os_label}.
–û–ø—Ä–µ–¥–µ–ª–∏, –Ω—É–∂–Ω–∞ –ª–∏ –æ–¥–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ –∏–ª–∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏–∑ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —à–∞–≥–æ–≤.
–í—Å–µ–≥–¥–∞ —É—á–∏—Ç—ã–≤–∞–π –û–°: –∫–æ–º–∞–Ω–¥—ã –¥–æ–ª–∂–Ω—ã —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞ {os_label}.
–ù–∏–∫–æ–≥–¥–∞ –Ω–µ –ø—Ä–µ–¥–ª–∞–≥–∞–π –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã (top/htop/less/vi/nano –∏ —Ç.–ø.).
–ù–µ –ø—Ä–∏–¥—É–º—ã–≤–∞–π –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ñ–∞–π–ª—ã/–ø—É—Ç–∏.
–û—Ç–≤–µ—á–∞–π –°–¢–†–û–ì–û –æ–¥–Ω–∏–º JSON –±–µ–∑ –ø–æ—è—Å–Ω–µ–Ω–∏–π –≤–æ–∫—Ä—É–≥.

–ï—Å–ª–∏ –û–î–ù–ê –∫–æ–º–∞–Ω–¥–∞:
{{
  "mode": "single",
  "single": {{
    "command": "<–æ–¥–Ω–æ—Å—Ç—Ä–æ—á–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞>",
    "explanation": "<–∫—Ä–∞—Ç–∫–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ>"
  }}
}}

–ï—Å–ª–∏ –ù–ï–°–ö–û–õ–¨–ö–û —à–∞–≥–æ–≤:
{{
  "mode": "workflow",
  "workflow": {{
    "name": "auto_nlu_plan",
    "env": {{}},
    "steps": [
      {{
        "name": "step_1",
        "run": "<–æ–¥–Ω–æ—Å—Ç—Ä–æ—á–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞>",
        "target": "auto",
        "cwd": null,
        "timeout": null,
        "env": {{}}
      }}
    ]
  }}
}}
""".strip()

    # –ó–∞–ø—Ä–æ—Å –∫ –º–æ–¥–µ–ª–∏
    resp = client.chat.completions.create(
    model="gpt-4o-mini",
    messages=[
        {"role": "system", "content": system_prompt},
        {"role": "user", "content": user_input},
    ],
    temperature=0.1,
    max_tokens=1400,
    response_format={"type": "json_object"},  # <‚Äî –∫–ª—é—á–µ–≤–æ–µ
)
    raw = (resp.choices[0].message.content or "").strip()
    raw_json = _extract_json(raw)

    # –ü–∞—Ä—Å–∏–º JSON-–æ—Ç–≤–µ—Ç
    try:
        data = json.loads(raw_json)
    except Exception:
        # --- –£–ú–ù–´–ô –§–û–õ–õ–ë–≠–ö –ù–ê –ö–õ–Æ–ß–ï–í–´–ï –§–†–ê–ó–´ (—Ä—É—Å—Å–∫–∏–π) ---
        ui = (user_input or "").lower()

        steps = []

        # –ø–æ–∫–∞–∑–∞—Ç—å —Ñ–∞–π–ª—ã (ls)
        if any(k in ui for k in ["–ø–æ–∫–∞–∂–∏ —Ñ–∞–π–ª—ã", "–ø–æ–∫–∞–∂–∏ —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤", "—Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤", "ls "]):
            steps.append({"name": "step_ls", "run": "ls", "target": "auto"})

        # —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å wget —á–µ—Ä–µ–∑ brew (macOS)
        if "wget" in ui and ("brew" in ui or "—á–µ—Ä–µ–∑ brew" in ui):
            steps.append({"name": "step_brew_wget", "run": "brew install wget", "target": "auto"})

        # —Å–æ–∑–¥–∞—Ç—å /tmp/testfolder
        if any(k in ui for k in ["—Å–æ–∑–¥–∞–π /tmp/testfolder", "—Å–æ–∑–¥–∞–π –ø–∞–ø–∫—É /tmp/testfolder", "mkdir /tmp/testfolder"]):
            steps.append({"name": "step_mkdir", "run": "mkdir -p /tmp/testfolder", "target": "auto"})

        # –æ–±–Ω–æ–≤–∏—Ç—å —Å–∏—Å—Ç–µ–º—É (sudo softwareupdate)
        if "–æ–±–Ω–æ–≤–∏ —Å–∏—Å—Ç–µ–º—É" in ui or "softwareupdate" in ui:
            steps.append({"name": "step_update", "run": "sudo softwareupdate --install --all", "target": "auto"})

        # –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ (sudo reboot)
        if "–ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏" in ui or "reboot" in ui:
            steps.append({"name": "step_reboot", "run": "sudo reboot", "target": "auto"})

        # docker run hello-world
        if "docker run hello-world" in ui or ("docker" in ui and "hello-world" in ui):
            steps.append({"name": "step_docker_hello", "run": "docker run hello-world", "target": "auto"})

        # apt-get update (–¥–ª—è Linux ‚Äî —É –Ω–∞—Å —ç—Ç–æ –±—É–¥–µ—Ç –ø–æ–º–µ—á–µ–Ω–æ –∏ –ø—Ä–æ–ø—É—â–µ–Ω–æ –Ω–∞ macOS –≤ —Ç–≤–æ–µ–π –ª–æ–≥–∏–∫–µ)
        if "apt-get update" in ui or "–æ–±–Ω–æ–≤–∏ apt-get" in ui:
            steps.append({"name": "step_apt_update", "run": "apt-get update", "target": "auto"})

        if steps:
            return {
                "mode": "workflow",
                "bash_command": f"echo –ü–ª–∞–Ω –∏–∑ {len(steps)} —à–∞–≥–æ–≤ (—Å–º. –ø—Ä–µ–≤—å—é)",
                "explanation": "–ë—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω –∫–∞–∫ workflow (—Ñ–æ–ª–ª–±—ç–∫ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Ñ—Ä–∞–∑–∞–º)",
                "workflow": {
                    "name": "auto_nlu_plan",
                    "env": {},
                    "steps": steps
                }
            }

        # --- –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–ª–∏ ‚Äî —Å—Ç–∞—Ä—ã–π —Ñ–æ–ª–ª–±—ç–∫ ---
        return _fallback_parse_legacy(raw)

        # –≤—Ç–æ—Ä–∞—è –ø–æ–ø—ã—Ç–∫–∞ ‚Äî –ø–æ–¥—á–∏—â–∞–µ–º
        try:
            raw_json2 = raw_json.replace("'", '"')
            data = json.loads(raw_json2)
        except Exception:
            return _fallback_parse_legacy(raw)

    mode = (data.get("mode") or "").lower().strip()

    # ---- WORKFLOW ----
    if mode == "workflow":
        wf = data.get("workflow") or {}
        steps = wf.get("steps") or []

                # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –∏ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —à–∞–≥–æ–≤
        norm_steps = []
        skipped = []  # —Å—é–¥–∞ –±—É–¥–µ–º —Å–æ–±–∏—Ä–∞—Ç—å –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ —à–∞–≥–∏

        for i, s in enumerate(steps, start=1):
            if not isinstance(s, dict):
                continue
            name = (s.get("name") or f"step_{i}").strip()
            run  = (s.get("run") or "").strip()
            if not run:
                continue

            # --- —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –û–° ---
            if os_label == "macOS" and run.startswith("apt-get"):
                skipped.append((name, run, "–Ω–µ—Å–æ–≤–º–µ—Å—Ç–∏–º–æ —Å macOS (—Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ Linux)"))
                continue
            if os_label == "Linux" and run.startswith("brew"):
                skipped.append((name, run, "–Ω–µ—Å–æ–≤–º–µ—Å—Ç–∏–º–æ —Å Linux (—Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ macOS)"))
                continue

            # --- —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –æ–ø–∞—Å–Ω—ã—Ö ---
            if ":(){ :|:& };:" in run or "fork" in run.lower():
                skipped.append((name, run, "–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ –∫–∞–∫ –æ–ø–∞—Å–Ω–æ–µ"))
                continue

            target = (s.get("target") or "auto").lower().strip()
            if target not in ("auto", "host", "docker"):
                target = "auto"

            entry = {
                "name": name,
                "run": run,
                "target": target,
            }

            # –µ—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ —Å sudo ‚Üí –ø–æ–º–µ—á–∞–µ–º
            if run.startswith("sudo "):
                entry["needs_sudo"] = True

            # –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–æ–ª—è
            if "cwd" in s: entry["cwd"] = str(s["cwd"])
            if "timeout" in s and s["timeout"] is not None:
                entry["timeout"] = int(s["timeout"])
            if "env" in s and isinstance(s["env"], dict):
                entry["env"] = dict(s["env"])
            if "if" in s: entry["if"] = str(s["if"])
            if "continue_on_error" in s: entry["continue_on_error"] = bool(s["continue_on_error"])
            if "retries" in s: entry["retries"] = dict(s["retries"])

            norm_steps.append(entry)

        # --- –µ—Å–ª–∏ –±—ã–ª–∏ –ø—Ä–æ–ø—É—Å–∫–∏, –ø–æ–∫–∞–∂–µ–º ---
        if skipped:
            msg = "–ü—Ä–æ–ø—É—â–µ–Ω–æ {} —à–∞–≥(–æ–≤):\n".format(len(skipped))
            for name, run, reason in skipped:
                msg += f"‚Ä¢ {run} ‚Äî {reason}\n"
            try:
                from rich.panel import Panel
                print(Panel.fit(msg.strip(), border_style="red"))
            except Exception:
                print("\n" + msg.strip() + "\n")

        if norm_steps:
            wf_name = (wf.get("name") or "auto_nlu_plan").strip() or "auto_nlu_plan"
            return {
                "mode": "workflow",
                "bash_command": f"echo –ü–ª–∞–Ω –∏–∑ {len(norm_steps)} —à–∞–≥–æ–≤ (—Å–º. –ø—Ä–µ–≤—å—é)",
                "explanation": "–ë—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω –∫–∞–∫ workflow",
                "workflow": {
                    "name": wf_name,
                    "env": wf.get("env") or {},
                    "steps": norm_steps,
                },
            }

    # ---- SINGLE ----
    single = (data.get("single") or {})
    cmd = (single.get("command") or "").strip()
    expl = (single.get("explanation") or "").strip()
    if not cmd:
        cmd = "echo –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–æ–º–∞–Ω–¥—É"
    if not expl:
        expl = "–ù–µ—Ç –ø–æ—è—Å–Ω–µ–Ω–∏—è"
    return {"mode": "single", "bash_command": cmd, "explanation": expl}



def suggest_overlay(query: str, context: dict | None = None) -> dict:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–æ–≤–µ—Ç –¥–ª—è HUD Overlay:
      - –∫–æ—Ä–æ—Ç–∫–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ (title)
      - –æ–¥–Ω–æ—Å—Ç—Ä–æ—á–Ω—É—é –∫–æ–º–∞–Ω–¥—É (command)
      - –∫—Ä–∞—Ç–∫–æ–µ –ø–æ—è—Å–Ω–µ–Ω–∏–µ (explain)
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç dict —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º–∏ –∫–ª—é—á–∞–º–∏.
    """
    os_type = platform.system()
    if os_type == "Darwin":
        os_label = "macOS"
    elif os_type == "Linux":
        os_label = "Linux"
    elif os_type == "Windows":
        os_label = "Windows"
    else:
        os_label = "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –û–°"

    ctx = context or {}
    tokens = query.strip().split()
    if tokens:
        correction = _correct_command(tokens[0])
        if correction and correction != tokens[0]:
            tokens[0] = correction
            query = " ".join(tokens)
    cwd = ctx.get("cwd") or os.getcwd()
    last_cmd = (ctx.get("last_cmd") or "").strip()
    exit_code = int(ctx.get("exit_code") or 0)
    stderr = (ctx.get("stderr") or "").strip()

    system_prompt = f"""
–¢—ã ‚Äî Ghost Brain: –ò–ò-–ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —Ç–µ—Ä–º–∏–Ω–∞–ª–∞ –Ω–∞ {os_label}.
–¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –û–î–ù–£ –ø–æ–Ω—è—Ç–Ω—É—é –∫–æ–º–∞–Ω–¥—É shell (—Å—Ç—Ä–æ–≥–æ –æ–¥–Ω–∞ —Å—Ç—Ä–æ–∫–∞, –±–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∏ –ø–µ—Ä–µ–Ω–æ—Å–∞ \n),
–∏ –∫–æ—Ä–æ—Ç–∫–æ –æ–±—ä—è—Å–Ω–∏—Ç—å –µ—ë —Å–º—ã—Å–ª –ø—Ä–æ—Å—Ç—ã–º–∏ —Å–ª–æ–≤–∞–º–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º. –¢–∞–∫–∂–µ –ø—Ä–∏–¥—É–º–∞–π –∫–æ—Ä–æ—Ç–∫–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫.

–ü—Ä–∞–≤–∏–ª–∞:
- –ö–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏—Å–ø–æ–ª–Ω–∏–º–æ–π –≤ —Ä–µ–∞–ª—å–Ω–æ–º —Ç–µ—Ä–º–∏–Ω–∞–ª–µ –¥–ª—è {os_label}.
- –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π –ø—Å–µ–≤–¥–æ–∫–æ–¥ –∏ –Ω–µ –¥–æ–±–∞–≤–ª—è–π –ø–æ—è—Å–Ω–µ–Ω–∏—è –≤ —Å–∞–º–æ–π –∫–æ–º–∞–Ω–¥–µ.
- –ï—Å–ª–∏ –≤–∏–¥–∏—à—å, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–¥–µ–ª–∞–ª –æ–ø–µ—á–∞—Ç–∫—É –≤ –∏–∑–≤–µ—Å—Ç–Ω–æ–π –∫–æ–º–∞–Ω–¥–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä 'gitt' –≤–º–µ—Å—Ç–æ 'git'), –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∏—Å–ø—Ä–∞–≤—å.
- –ù–∏–∫–æ–≥–¥–∞ –Ω–µ –ø—Ä–µ–¥–ª–∞–≥–∞–π 'brew install <—á—Ç–æ-—Ç–æ>', –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã–π –ø–∞–∫–µ—Ç. –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ —Ä–µ–∞–ª—å–Ω–æ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç ‚Äî –≤–µ—Ä–Ω–∏ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç: 'man <—Å–ª–æ–≤–æ>' –∏–ª–∏ '<—Å–ª–æ–≤–æ> --help'.


–í–µ—Ä–Ω–∏ JSON —Å—Ç—Ä–æ–≥–æ —Ç–∞–∫–æ–≥–æ –≤–∏–¥–∞:
{{
  "title": "–ö–æ—Ä–æ—Ç–∫–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫",
  "command": "–æ–¥–Ω–æ—Å—Ç—Ä–æ—á–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞",
  "explain": "–∫—Ä–∞—Ç–∫–æ–µ –ø–æ—è—Å–Ω–µ–Ω–∏–µ"
}}
""".strip()

    user_msg = (
        f"–ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {query}\n\n"
        f"–ö–æ–Ω—Ç–µ–∫—Å—Ç:\n- cwd: {cwd}\n- last_cmd: {last_cmd}\n- exit_code: {exit_code}\n- stderr: {stderr[:400]}"
    )

    try:
        resp = client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": user_msg},
            ],
            temperature=0.1,
            max_tokens=600,
            response_format={"type": "json_object"},
        )
        raw = (resp.choices[0].message.content or "").strip()
        raw_json = _extract_json(raw)
        data = json.loads(raw_json)
        title = (data.get("title") or "").strip() or "–°–æ–≤–µ—Ç –æ—Ç –ò–ò"
        command = (data.get("command") or "").strip() or "echo –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–æ–º–∞–Ω–¥—É"
        explain = (data.get("explain") or "").strip() or "–ù–µ—Ç –ø–æ—è—Å–Ω–µ–Ω–∏—è"
        command = " ".join(command.splitlines()).strip()  # —Å—Ç—Ä–æ–≥–æ –æ–¥–Ω–∞ —Å—Ç—Ä–æ–∫–∞

        # --- –ñ—ë—Å—Ç–∫–∞—è –ø–æ—Å—Ç-–æ–±—Ä–∞–±–æ—Ç–∫–∞ ---
        # –µ—Å–ª–∏ –º–æ–¥–µ–ª—å —Å–≥–µ–Ω–µ—Ä–∏–ª–∞ brew install <–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ>, –∑–∞–º–µ–Ω—è–µ–º –Ω–∞ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π fallback
                # --- –ñ—ë—Å—Ç–∫–∞—è –ø–æ—Å—Ç-–æ–±—Ä–∞–±–æ—Ç–∫–∞ ---
        if command.startswith("brew install "):
            pkg = command.replace("brew install", "").strip()
            if pkg and pkg not in COMMON_COMMANDS:
                print(f"[GhostBrain] ‚ö†Ô∏è –ü–µ—Ä–µ—Ö–≤–∞—Ç brew install {pkg} ‚Üí –∑–∞–º–µ–Ω–µ–Ω–æ –Ω–∞ help")
                title = f"–ö–æ–º–∞–Ω–¥–∞ ¬´{pkg}¬ª –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
                command = f"man {pkg} || {pkg} --help"
                explain = f"–¢–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã –Ω–µ—Ç. –õ—É—á—à–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø—Ä–∞–≤–∫—É –ø–æ ¬´{pkg}¬ª."


        return {"title": title, "command": command, "explain": explain}

    except Exception:
        safe = (query or "").strip() or "help"
        return {"title": "–û—Ç–∫—Ä–æ–π –ø–æ–º–æ—â—å", "command": f"man {safe} || {safe} --help", "explain": "–ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–∏–º —Å–ø—Ä–∞–≤–∫—É –ø–æ –∑–∞–ø—Ä–æ—Å—É."}

import difflib

# –°–ø–∏—Å–æ–∫ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –±–∏–Ω–∞—Ä–µ–π –¥–ª—è –∞–≤—Ç–æ-–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π
COMMON_BINARIES = [
    "git", "ls", "python", "pip", "brew", "npm", "node", "cargo", "make",
    "docker", "kubectl", "ssh", "top", "ps", "kill", "htop", "man", "grep", "find"
]

def analyze_error(command: str, exit_code: int, stderr: str, cwd: str | None = None) -> dict:
    """
    –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ—à–∏–±–∫—É –ø–æ—Å–ª–µ–¥–Ω–µ–π –∫–æ–º–∞–Ω–¥—ã –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç dict: { "title": ..., "command": ..., "explain": ... }
    """
    os_type = platform.system()
    if os_type == "Darwin":
        os_label = "macOS"
    elif os_type == "Linux":
        os_label = "Linux"
    elif os_type == "Windows":
        os_label = "Windows"
    else:
        os_label = "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –û–°"

    stderr = (stderr or "").strip()
    cmd = (command or "").strip()

    # üÜï 1. –ü—Ä–æ–≤–µ—Ä–∫–∞: "command not found"
    if "command not found" in stderr:
        wrong = stderr.split(":")[-1].replace("command not found", "").strip()
        if wrong:
            match = difflib.get_close_matches(wrong, COMMON_BINARIES, n=1, cutoff=0.7)
            if match:
                fixed = match[0]
                fixed_cmd = cmd.replace(wrong, fixed, 1)
                return {
                    "title": f"–û–ø–µ—á–∞—Ç–∫–∞? –ü–æ—Ö–æ–∂–µ, —Ç—ã –∏–º–µ–ª –≤ –≤–∏–¥—É ¬´{fixed}¬ª",
                    "command": fixed_cmd,
                    "explain": f"–ö–æ–º–∞–Ω–¥–∞ ¬´{wrong}¬ª –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ ¬´{fixed}¬ª."
                }
            else:
                return {
                    "title": f"–ö–æ–º–∞–Ω–¥–∞ ¬´{wrong}¬ª –Ω–µ –Ω–∞–π–¥–µ–Ω–∞",
                    "command": f"man {wrong} || {wrong} --help",
                    "explain": f"–¢–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã –Ω–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —É—Å—Ç–∞–Ω–æ–≤–∫—É –∏–ª–∏ —Å–ø—Ä–∞–≤–∫—É."
                }

    # üß† 2. –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ "command not found", –ø—Ä–æ–±—É–µ–º –ò–ò-–∞–Ω–∞–ª–∏–∑
    system_prompt = f"""
–¢—ã ‚Äî Ghost Brain: –ø–æ–º–æ—â–Ω–∏–∫ –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ –Ω–∞ {os_label}.
–¢–µ–±–µ –¥–∞—é—Ç –∫–æ–º–∞–Ω–¥—É, –µ—ë –∫–æ–¥ –≤—ã—Ö–æ–¥–∞ –∏ stderr.
–ù—É–∂–Ω–æ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –æ–¥–Ω—É –∏—Å–ø—Ä–∞–≤–ª—è—é—â—É—é –∫–æ–º–∞–Ω–¥—É –∏ –∫–æ—Ä–æ—Ç–∫–æ –æ–±—ä—è—Å–Ω–∏—Ç—å —Ä–µ—à–µ–Ω–∏–µ.
–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ ‚Äî JSON:
{{
  "title": "–ö–æ—Ä–æ—Ç–∫–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ (–Ω–∞–ø—Ä–∏–º–µ—Ä '–ü—Ä–∏–º–∏ –ª–∏—Ü–µ–Ω–∑–∏—é Xcode')",
  "command": "–∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è",
  "explain": "–ø–æ—è—Å–Ω–µ–Ω–∏–µ –ø—Ä–æ—Å—Ç—ã–º–∏ —Å–ª–æ–≤–∞–º–∏"
}}
–ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–∞ –∏–ª–∏ —Ä–µ—à–µ–Ω–∏—è –Ω–µ—Ç ‚Äî –ø—Ä–µ–¥–ª–æ–∂–∏ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø—Ä–∞–≤–∫—É (--help).
""".strip()

    user_msg = (
        f"–ö–æ–º–∞–Ω–¥–∞: {cmd}\n"
        f"–ö–æ–¥ –≤—ã—Ö–æ–¥–∞: {exit_code}\n"
        f"stderr:\n{stderr[:600]}"
    )

    try:
        resp = client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": user_msg},
            ],
            temperature=0.1,
            max_tokens=500,
            response_format={"type": "json_object"},
        )
        raw = (resp.choices[0].message.content or "").strip()
        raw_json = _extract_json(raw)
        data = json.loads(raw_json)
        return {
            "title": (data.get("title") or "–°–æ–≤–µ—Ç –ø–æ –æ—à–∏–±–∫–µ").strip(),
            "command": (data.get("command") or "echo '—Å–º. --help'").strip(),
            "explain": (data.get("explain") or "–ù–µ—Ç –ø–æ—è—Å–Ω–µ–Ω–∏—è.").strip(),
        }
    except Exception:
        return {
            "title": "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å",
            "command": f"echo '{cmd}' failed, —Å–º. stderr",
            "explain": "Ghost Brain –Ω–µ —Å–º–æ–≥ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Ä–µ—à–µ–Ω–∏–µ.",
        }

