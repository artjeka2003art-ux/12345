# core/ci_init.py
from __future__ import annotations

import subprocess
from pathlib import Path
from rich.panel import Panel
from rich.console import Console
import difflib
import re
console = Console()

TEMPLATES = {
    "python": "core/templates/gha_python.yml",
    "node": "core/templates/gha_node.yml",
    "go": "core/templates/gha_go.yml",
    "docker": "core/templates/gha_docker.yml",
    "java": "core/templates/gha_java.yml",
    "dotnet": "core/templates/gha_dotnet.yml",
    "rust": "core/templates/gha_rust.yml",
    "php": "core/templates/gha_php.yml",
    "ruby": "core/templates/gha_ruby.yml",
    "android": "core/templates/gha_android.yml",
    "multi": "core/templates/gha_multi.yml",
}

def git_auto_commit(file: str, message: str) -> str | None:
    """
    –î–æ–±–∞–≤–ª—è–µ—Ç —Ñ–∞–π–ª –≤ git, –¥–µ–ª–∞–µ—Ç commit –∏ push.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ GitHub Actions, –µ—Å–ª–∏ —É–¥–∞–ª–æ—Å—å.
    """
    try:
        subprocess.run(["git", "add", file], check=True)
        subprocess.run(["git", "commit", "-m", message], check=True)
        subprocess.run(["git", "push"], check=True)

        # –ø–æ–ª—É—á–∞–µ–º url origin
        url = subprocess.run(
            ["git", "remote", "get-url", "origin"],
            capture_output=True, text=True, check=True
        ).stdout.strip()

        if url.endswith(".git"):
            url = url[:-4]
        actions_url = f"{url}/actions"

        print(f"‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–∫–æ–º–º–∏—á–µ–Ω—ã –∏ –∑–∞–ø—É—à–µ–Ω—ã: {file}")
        print(f"üîó –°–º–æ—Ç—Ä–∏ –ø—Ä–æ–≥–æ–Ω: {actions_url}")
        return actions_url

    except subprocess.CalledProcessError as e:
        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å git push: {e}")
        return None


def init_ci(target: str = "python", force: bool = False, outfile: str | None = None, autopush: bool = False) -> str:
    """
    –°–æ–∑–¥–∞—ë—Ç .github/workflows/*.yml –∏–∑ —à–∞–±–ª–æ–Ω–∞.
    target: python|node|go|docker|java|dotnet|rust|php|ruby|android|multi
    force: –µ—Å–ª–∏ True ‚Äî –ø–µ—Ä–µ–∑–∞–ø–∏—à–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª.
    outfile: –∏–º—è —Ñ–∞–π–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, ci_rust.yml). –ï—Å–ª–∏ None ‚Üí –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è ci.yml.
    autopush: –µ—Å–ª–∏ True ‚Äî —Å—Ä–∞–∑—É git add/commit/push.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ —Å–æ–∑–¥–∞–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É.
    """
    if target not in TEMPLATES:
        raise ValueError(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø CI: {target}")

    src = Path(TEMPLATES[target])
    if not src.exists():
        raise FileNotFoundError(f"–®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω: {src}")

    workflows_dir = Path(".github/workflows")
    workflows_dir.mkdir(parents=True, exist_ok=True)

    # –≤—ã–±–∏—Ä–∞–µ–º –ø—É—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    if outfile:
        dst = workflows_dir / outfile
    else:
        dst = workflows_dir / "ci.yml"

    # —á–∏—Ç–∞–µ–º —Å—Ç–∞—Ä—ã–π —Ñ–∞–π–ª –µ—Å–ª–∏ –µ—Å—Ç—å
    old_text = None
    if dst.exists():
        old_text = dst.read_text()
        if not force:
            console.print(Panel.fit(
                f"[yellow]–§–∞–π–ª {dst} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.[/yellow]\n"
                f"–ó–∞–ø—É—Å—Ç–∏ —Å [bold]--force[/bold], –µ—Å–ª–∏ —Ö–æ—á–µ—à—å –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å.\n"
                f"–°–æ–≤–µ—Ç: —Å–Ω–∞—á–∞–ª–∞ –ø–æ—Å–º–æ—Ç—Ä–∏ diff –∫–æ–º–∞–Ω–¥–æ–π [bold]ci init {target} --force[/bold].",
                border_style="yellow"
            ))
            return str(dst)

    # —á–∏—Ç–∞–µ–º –Ω–æ–≤—ã–π —à–∞–±–ª–æ–Ω
    new_text = src.read_text()

    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –Ω–∞–ª–∏—á–∏–µ workflow_dispatch
    if "workflow_dispatch" not in new_text:
        lines = []
        inserted = False
        for line in new_text.splitlines():
            lines.append(line)
            if line.strip().startswith("pull_request:") and not inserted:
                lines.append("  workflow_dispatch: {}")
                inserted = True
        if not inserted:
            patched = []
            for line in lines:
                patched.append(line)
                if line.strip().startswith("on:") and not inserted:
                    patched.append("  workflow_dispatch: {}")
                    inserted = True
            lines = patched
        new_text = "\n".join(lines)
    else:
        new_text = re.sub(r"workflow_dispatch:\s*\n", "workflow_dispatch: {}\n", new_text)

    # –µ—Å–ª–∏ –±—ã–ª —Å—Ç–∞—Ä—ã–π —Ç–µ–∫—Å—Ç –∏ –≤–∫–ª—é—á—ë–Ω force ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º diff
    if old_text is not None and force:
        diff = difflib.unified_diff(
            old_text.splitlines(),
            new_text.splitlines(),
            fromfile=str(dst),
            tofile=str(src),
            lineterm=""
        )
        diff_text = "\n".join(diff) or "–ù–µ—Ç —Ä–∞–∑–ª–∏—á–∏–π."
        console.print(Panel.fit(
            f"[cyan]Diff –∏–∑–º–µ–Ω–µ–Ω–∏–π ({target}):[/cyan]\n\n{diff_text}",
            border_style="cyan", padding=(1,2)
        ))

    # –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –Ω–æ–≤—ã–π —Ñ–∞–π–ª
    dst.write_text(new_text)

    # –µ—Å–ª–∏ --push ‚Üí –ø—É—à–∏–º –≤ git –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Å—ã–ª–∫—É
    if autopush:
        actions_url = git_auto_commit(str(dst), f"update CI for {target}")
        if actions_url:
            console.print(Panel(
                f"[green]Workflow —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∏ –∑–∞–ø—É—à–µ–Ω üöÄ[/green]\n[link={actions_url}]–û—Ç–∫—Ä—ã—Ç—å Actions[/link]",
                border_style="green"
            ))
    else:
        console.print(Panel.fit(
            f"[green]–°–æ–∑–¥–∞–Ω workflow –¥–ª—è GitHub Actions ({target})[/green]\n{dst}",
            border_style="green"
        ))

    return str(dst)
